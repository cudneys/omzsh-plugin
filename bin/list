#!/usr/bin/env python3

import os
import requests
import click
import platform

@click.group()
def cmd():
    pass


@cmd.group("available")
def available():
    pass

@cmd.group("installed")
def installed():
    pass

@available.group("istioctl")
def available_istioctl():
    pass

@available.group("kubectl")
def available_kubectl():
    pass


@installed.group("istioctl")
def installed_istioctl():
    pass

@installed.group("kubectl")
def installed_kubectl():
    pass

@available_kubectl.command("versions")
def available_kubectl_versions():
    print("Available versions")

@available_istioctl.command("versions")
def istioctl_versions():
    versions = getAvailableIstioctlVersions()
    installed = getInstalledIstioctlVersions()
    state = "UNKNOWN"
    print("{0:20.20s} {1:10.10s}".format("Version","State"))
    print("{0:20.20s} + {1:10.10s}".format("-"*100,"-"*100))
    for av in sorted(versions):
        if av in installed:
            state = "INSTALLED"
        else:
            state = "AVAILABLE"

        print("{0:20.20s} | {1:10.10s}".format(av,state))

@installed_istioctl.command("versions")
def installed_istioctl_versions():
    versions = getInstalledIstioctlVersions()
    for v in sorted(versions):
        print(v)

def getInstalledIstioctlVersions():
    machine = platform.machine().replace("x86_64","amd64")
    thisOS  = platform.system().lower()
    osID    = "-{0}-{1}".format(thisOS,machine)

    ret = set()

    binFiles = os.listdir(os.path.expanduser("~/bin"))
    for f in binFiles:
        if f.startswith("istioctl") and f != "istioctl":
            ret.add(f.replace("istioctl-","").replace(osID,""))

    return sorted(list(ret))


def getAvailableIstioctlVersions():
    ret = set()
    versions = {}
    headers = {
            "Accept": "application/vnd.github+json",
            "X-GitHub-Api-Version": "2022-11-28",
    }
    r = requests.get("https://api.github.com/repos/istio/istio/releases",headers=headers)
    data = r.json()
    for thing in data:
        ret.add(thing['tag_name'])
    return ret

if __name__ == '__main__':
    cmd()
