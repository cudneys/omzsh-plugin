#!/usr/bin/env python3

import os
import click
import requests
import platform
import tarfile
import shutil

from pprint import pprint as pp

class Asset(object):
    def __init__(self,data,**kwargs):
        self.data = data
        self._version = kwargs.get('version')
        self.this_machine = platform.machine().replace("x86_64","amd64")
        self.this_os      = platform.system().lower()

        self.platform_string = "istioctl-{2}-{0}-{1}".format(self.this_os,self.this_machine,self.version)

    @property
    def url(self):
        return self.data['browser_download_url']

    @property
    def name(self):
        return self.data['name']

    @property
    def version(self):
        return self._version

    @property
    def machine_appropriate(self):
        if self.platform_string in self.url:
            return True
        return False

    @property
    def size(self):
        return self.data['size']

    @property
    def node_id(self):
        return self.data['node_id']

    @property
    def id(self):
        return self.data['id']

    @property
    def type(self):
        if self.name.endswith("sha256"):
            return "shasum"
        elif self.name.endswith("tar.gz"):
            return "tarball"
        elif self.name.endswith(".zip"):
            return "zipfile"
        elif self.name.endswith("spdx"):
            return "spdxfile"
        else:
            return "elephino"

    @property
    def local_file(self):
        return os.path.join(self.local_dir,self.url.split("/")[-1])

    @property
    def local_file_name(self):
        return self.url.split("/")[-1].replace(".tar.gz","").replace(".zip","")

    @property
    def local_dir(self):
        return os.path.join("/tmp",str(os.getpid()))

    def download(self):
        totalBits = 0
        rCount = 0
        r = requests.get(self.url,stream=True)
        if r.status_code == 200:
            os.makedirs(self.local_dir)
            localFile = self.local_file
            with open(localFile, 'wb') as f:
                for chunk in r.iter_content(chunk_size=1024): 
                    if chunk:
                        rCount += 1
                        f.write(chunk)
                        totalBits += 1024
                        if rCount >= 1024:
                            print("Downloaded: {0:,} bits -> {1}".format(totalBits,localFile))
                            rCount = 0
    def extract(self):
        if not os.path.exists(self.local_file):
            self.download()

        if os.path.exists(self.local_file):
            print("Extracting {0} -> {1}".format(self.local_file,self.local_dir))
            t = tarfile.open(self.local_file)
            t.extractall(self.local_dir)
        else:
            raise FileNotFoundError(self.local_file)

    def install(self,noRelink):
        src = os.path.join(self.local_dir,"istioctl")
        dst = os.path.expanduser("~/bin/{0}".format(self.local_file_name))

        if os.path.exists(dst):
            raise FileExistsError(dst)

        if not os.path.exists(src):
            self.extract()

        print("Installing {0} -> {1}".format(src,dst))
        shutil.move(src,dst)

        if noRelink is False:
            link = os.path.expanduser("~/bin/istioctl")
            if os.path.islink(link):
                os.unlink(link)
            os.symlink(dst,link)
        else:
            print("Not linking the new istioctl binary!")

class Release(object):
    def __init__(self,data):
        self.data = data

    @property
    def tag_name(self):
        return self.data['tag_name']

    @property
    def version(self):
        return self.data['tag_name']

    @property
    def assets(self):
        for a in self.data['assets']:
            asset = Asset(a,version=self.version)
            if asset.machine_appropriate is True:
                yield asset

    def dump(self):
        pp(self.data)

def getVersions():
    versions = {}
    headers = {
            "Accept": "application/vnd.github+json",
            "X-GitHub-Api-Version": "2022-11-28",
    }

    r = requests.get("https://api.github.com/repos/istio/istio/releases",headers=headers)
    data = r.json()
    for thing in data:
        versions[thing["tag_name"]] = Release(thing)
    return versions

def getLatestVersion():
    versions = getVersions()
    latest = sorted(versions.keys(),reverse=True)[0]
    return versions[latest]

@click.command()
@click.option("--version",type=str,default="latest",help="The version you would like to install (DEFAULT: latest)")
@click.option("--no-relink",is_flag=True,default=False, help="DO NOT Relink your ~/bin/istioctl to the newly installed version")
def run(version,no_relink):
    if version == "latest":
        version = getLatestVersion()

    print("Version: {0}".format(version.tag_name))

    for asset in version.assets:
        if asset.type != "shasum":
            try:
                asset.install(no_relink)
            except FileExistsError as e:
                print("The {0} binary is already installed".format(e))

if __name__ == '__main__':
    run()

